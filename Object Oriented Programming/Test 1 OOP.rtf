{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red0\green120\blue215;\red128\green0\blue128;\red0\green0\blue255;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title Test 1 OOP.rtf}}

\deflang1033\pard\plain\f0\fs28 \cf0 #include <iostream>
\par #include <malloc.h>
\par \cf1\b using\b0  \b namespace\b0  std\cf2\b ;
\par \b0\cf3\i //Coded by Hari Krishna Shah
\par 
\par 
\par \i0\cf1\b class\b0  renewal\cf2\b \{
\par \b0\cf1 	\b private\cf2 :
\par \b0\cf1 		\b int\b0  renewal_count\cf2\b ;
\par \b0\cf1 		\b struct\b0  renewal_date\cf2\b \{
\par \b0\cf1 			\b int\b0  year\cf2\b ;
\par \b0\cf1 			\b int\b0  month\cf2\b ;
\par \b0\cf1 			\b int\b0  day\cf2\b ;
\par \b0\cf1 		\cf2\b \}*\b0\cf1 rd\cf2\b ;
\par \b0\cf1 		\b int\b0  price\cf2\b ;
\par \b0\cf1 		\b int\b0  renewal_gap\cf2\b ;
\par \b0\cf1 		
\par 		\b public\cf2 :
\par \b0\cf1 			\b void\b0  get_details\cf2\b (\cf1 int\b0  r_renewal_count\cf2\b ,\b0\cf1  \b int\b0  r_price\cf2\b ,\b0\cf1  \b int\b0  r_year\cf2\b ,\b0\cf1  \b int\b0  r_month\cf2\b ,\b0\cf1  \b int\b0  r_day\cf2\b ,\b0\cf1  \b int\b0  r_renewal_gap\cf2\b );
\par \b0\cf1 			\b void\b0  display\cf2\b ();
\par \b0\cf1 			renewal\cf2\b ()\{
\par \b0\cf1 				rd \cf2\b =\b0\cf1  NULL\cf2\b ;
\par \b0\cf1 			\cf2\b \}
\par 
\par \b0\cf1 			\cf2\b ~\b0\cf1 renewal\cf2\b ()\{
\par \b0\cf1 				\b delete\b0  rd\cf2\b ;
\par \b0\cf1 			\cf2\b \}
\par \b0\cf1 			
\par \cf2\b \};
\par \cf1 void\b0  renewal\cf2\b ::\b0\cf1 get_details\cf2\b (\cf1 int\b0  r_renewal_count\cf2\b ,\b0\cf1  \b int\b0  r_price\cf2\b ,\b0\cf1  \b int\b0  r_year\cf2\b ,\b0\cf1  \b int\b0  r_month\cf2\b ,\b0\cf1  \b int\b0  r_day\cf2\b ,\b0\cf1  \b int\b0  r_renewal_gap\cf2\b )\{
\par \b0\cf1 	renewal_count \cf2\b =\b0\cf1  r_renewal_count\cf2\b ;
\par \b0\cf1 	price \cf2\b =\b0\cf1  r_price\cf2\b ;
\par \b0\cf1 	renewal_gap \cf2\b =\b0\cf1  r_renewal_gap\cf2\b ;
\par \b0\cf1 	\b int\b0  add\cf2\b ;
\par \b0\cf1 	
\par 	rd \cf2\b =\b0\cf1  \cf2\b (\cf1 struct\b0  renewal_date \cf2\b *)\b0\cf1  \cf2\b (\b0\cf1 malloc\cf2\b (\b0\cf1 renewal_count\cf2\b *\cf1 sizeof\cf2 (\cf1 struct\b0  renewal_date\cf2\b )));
\par \b0\cf1 		rd\cf2\b [\b0\cf4 0\cf2\b ].\b0\cf1 year \cf2\b =\b0\cf1  r_year\cf2\b ;
\par \b0\cf1 		rd\cf2\b [\b0\cf4 0\cf2\b ].\b0\cf1 month \cf2\b =\b0\cf1  r_month\cf2\b ;
\par \b0\cf1 		rd\cf2\b [\b0\cf4 0\cf2\b ].\b0\cf1 day \cf2\b =\b0\cf1  r_day\cf2\b ;
\par \b0\cf1 	
\par 	
\par 	\b for\cf2 (\cf1 int\b0  i \cf2\b =\b0\cf1  \cf4 1\cf2\b ;\b0\cf1  i\cf2\b <\b0\cf1 renewal_count\cf2\b ;\b0\cf1  i\cf2\b ++)\{
\par \b0\cf1 		rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 year \cf2\b =\b0\cf1  rd\cf2\b [\b0\cf1 i\cf2\b -\b0\cf4 1\cf2\b ].\b0\cf1 year\cf2\b ;
\par \b0\cf1 		rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month \cf2\b =\b0\cf1  rd\cf2\b [\b0\cf1 i\cf2\b -\b0\cf4 1\cf2\b ].\b0\cf1 month\cf2\b ;
\par \b0\cf1 		rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 day \cf2\b =\b0\cf1  rd\cf2\b [(\b0\cf1 i\cf2\b -\b0\cf4 1\cf2\b )].\b0\cf1 day \cf2\b +\b0\cf1  renewal_gap\cf2\b ;
\par \b0\cf1 		
\par 		\b if\cf2 (\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 day\cf2\b >\b0\cf4 30\cf2\b )\{
\par \b0\cf1 			add \cf2\b =\b0\cf1  \cf2\b (\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 day\cf2\b /\b0\cf4 30\cf2\b );
\par \b0\cf1 			rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 day \cf2\b =\b0\cf1  rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 day\cf2\b %\b0\cf4 30\cf2\b ;
\par \b0\cf1 			rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month \cf2\b =\b0\cf1  rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month \cf2\b +\b0\cf1  add\cf2\b ;
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 		\b if\cf2 (\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month\cf2\b >\b0\cf4 12\cf2\b )\{
\par \b0\cf1 			add \cf2\b =\b0\cf1  \cf2\b (\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month\cf2\b /\b0\cf4 12\cf2\b );
\par \b0\cf1 			rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month \cf2\b =\b0\cf1  rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month\cf2\b %\b0\cf4 12\cf2\b ;
\par \b0\cf1 			rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 year \cf2\b =\b0\cf1  rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 year \cf2\b +\b0\cf1  add\cf2\b ;
\par \b0\cf1 		\cf2\b \}
\par \b0\cf1 	\cf2\b \}
\par \b0\cf1 	
\par \cf2\b \}
\par 
\par \cf1 void\b0  renewal\cf2\b ::\b0\cf1 display\cf2\b ()\{
\par \b0\cf1 	\b int\b0  total_price\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "\\nThe entered gap day for renewal is "\cf2 <<\b0\cf1 renewal_gap\cf2\b <<\cf5 "."\cf2 <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "The entered price for each renewal is "\cf2 <<\b0\cf1 price\cf2\b <<\cf5 "."\cf2 <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "Following is the list of each renewal date."\cf2 <<\b0\cf1 endl\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 	
\par 	\b for\cf2 (\cf1 int\b0  i \cf2\b =\b0\cf1  \cf4 0\cf2\b ;\b0\cf1  i\cf2\b <\b0\cf1 renewal_count\cf2\b ;\b0\cf1  i\cf2\b ++)\{
\par \b0\cf1 		cout\cf2\b <<\cf5 "Below is detail for renewal date number "\cf2 <<\b0\cf1 i\cf2\b +\b0\cf4 1\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf5 "Year: "\cf2 <<\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 year\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf5 "Month: "\cf2 <<\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 month\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 		cout\cf2\b <<\cf5 "Day: "\cf2 <<\b0\cf1 rd\cf2\b [\b0\cf1 i\cf2\b ].\b0\cf1 day\cf2\b <<\b0\cf1 endl\cf2\b <<\b0\cf1 endl\cf2\b ;
\par \b0\cf1 	\cf2\b \}
\par \b0\cf1 	total_price \cf2\b =\b0\cf1  price\cf2\b *\b0\cf1 renewal_count\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "The total price for the renewal is "\cf2 <<\b0\cf1 total_price\cf2\b <<\cf5 "."\cf2 <<\b0\cf1 endl\cf2\b ;
\par \}
\par 
\par \cf1 int\b0  main\cf2\b ()\{
\par \b0\cf1 	\b class\b0  renewal r\cf2\b ;
\par \b0\cf1 	\b int\b0  r_count\cf2\b ,\b0\cf1  r_price\cf2\b ,\b0\cf1  r_year\cf2\b ,\b0\cf1  r_month\cf2\b ,\b0\cf1  r_day\cf2\b ,\b0\cf1  r_renewal_gap\cf2\b ,\b0\cf1  r_renewal_count\cf2\b ;
\par \b0\cf1 	
\par 	cout\cf2\b <<\cf5 "Enter the how many times you want to renew the sim card: "\cf2 ;
\par \b0\cf1 	cin\cf2\b >>\b0\cf1 r_renewal_count\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "Enter the day after which sim is to be renewed: "\cf2 ;
\par \b0\cf1 	cin\cf2\b >>\b0\cf1 r_renewal_gap\cf2\b ;
\par \b0\cf1 	
\par 	cout\cf2\b <<\cf5 "Enter the price of each renewal: "\cf2 ;
\par \b0\cf1 	cin\cf2\b >>\b0\cf1 r_price\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "Enter the current year of renewal: "\cf2 ;
\par \b0\cf1 	cin\cf2\b >>\b0\cf1 r_year\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "Enter the current month of renewal: "\cf2 ;
\par \b0\cf1 	cin\cf2\b >>\b0\cf1 r_month\cf2\b ;
\par \b0\cf1 	cout\cf2\b <<\cf5 "Enter the current day of renewal: "\cf2 ;
\par \b0\cf1 	cin\cf2\b >>\b0\cf1 r_day\cf2\b ;
\par \b0\cf1 	
\par 	r\cf2\b .\b0\cf1 get_details\cf2\b (\b0\cf1 r_renewal_count\cf2\b ,\b0\cf1  r_price\cf2\b ,\b0\cf1  r_year\cf2\b ,\b0\cf1  r_month\cf2\b ,\b0\cf1  r_day\cf2\b ,\b0\cf1  r_renewal_gap\cf2\b );
\par \b0\cf1 	
\par 	r\cf2\b .\b0\cf1 display\cf2\b ();
\par \b0\cf1 	
\par 	\b return\b0  \cf4 0\cf2\b ;
\par \b0\cf1 	
\par 	
\par \cf2\b \}
\par }